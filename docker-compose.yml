# Run this file by typing: docker-compose up -d
version: "3.9"
services:
  ui:
    build:
      context: .
      dockerfile: ./packages/ui/Dockerfile
      args:
        PROJECT_DIR: "${PROJECT_DIR:-/srv/app}"
    container_name: nln_ui
    environment:
      NODE_ENV: "development"
      VITE_SERVER_LOCATION: "${SERVER_LOCATION}"
      VITE_PORT_SERVER: "${PORT_SERVER:-5331}"
      VITE_SERVER_URL: "${SERVER_URL}"
      VITE_SITE_IP: "${SITE_IP}"
      PROJECT_DIR: "${PROJECT_DIR:-/srv/app}"
      VIRTUAL_HOST: "${VIRTUAL_HOST}"
      VIRTUAL_PATH: "/"
      VIRTUAL_PORT: "${PORT_UI:-3001}"
      LETSENCRYPT_HOST: "${VIRTUAL_HOST}"
      LETSENCRYPT_EMAIL: "${LETSENCRYPT_EMAIL}"
    ports:
      - ${PORT_UI:-3001}:${PORT_UI:-3001}
    networks:
      - proxy
      - app
    volumes:
      - ./node_modules:${PROJECT_DIR:-/srv/app}/node_modules
      - ./packages/ui:${PROJECT_DIR:-/srv/app}/packages/ui:z
      - ./packages/shared:${PROJECT_DIR:-/srv/app}/packages/shared:z
    depends_on:
      server:
        condition: service_healthy
    command: /bin/sh -c "chmod +x ${PROJECT_DIR:-/srv/app}/scripts/* && ${PROJECT_DIR:-/srv/app}/scripts/ui.sh"
  server:
    build:
      context: .
      dockerfile: ./packages/server/Dockerfile
      args:
        PROJECT_DIR: "${PROJECT_DIR:-/srv/app}"
    container_name: nln_server
    environment:
      NODE_ENV: "development"
      JWT_SECRET: "${JWT_SECRET}"
      CSRF_SECRET: "${CSRF_SECRET}"
      PROJECT_DIR: "${PROJECT_DIR:-/srv/app}"
      PORT_SERVER: "${PORT_SERVER:-5331}"
      VITE_SERVER_LOCATION: "${SERVER_LOCATION}"
      VITE_PORT_SERVER: "${PORT_SERVER:-5331}"
      REDIS_CONN: "redis:6379"
      DB_CONN: "db:${PORT_DB:-5433}"
      DB_URL: "postgresql://${DB_USER}:${DB_PASSWORD}@db:5433/${DB_NAME}"
      CREATE_MOCK_DATA: "${CREATE_MOCK_DATA}"
      DB_PULL: "${DB_PULL}"
      SITE_EMAIL_FROM: "${SITE_EMAIL_FROM}"
      ADMIN_PASSWORD: "${ADMIN_PASSWORD}"
      SITE_EMAIL_USERNAME: "${SITE_EMAIL_USERNAME}"
      SITE_EMAIL_PASSWORD: "${SITE_EMAIL_PASSWORD}"
      SITE_EMAIL_ALIAS: "${SITE_EMAIL_ALIAS}"
      SITE_IP: "${SITE_IP}"
      SERVER_URL: "${SERVER_URL}"
      VIRTUAL_HOST: "${VIRTUAL_HOST}"
      VIRTUAL_PORT: "${PORT_SERVER:-5331}"
      VIRTUAL_PATH: "/api"
      LETSENCRYPT_HOST: "${VIRTUAL_HOST}"
      LETSENCRYPT_EMAIL: "${LETSENCRYPT_EMAIL}"
    ports:
      - ${PORT_SERVER:-5331}:${PORT_SERVER:-5331}
    #   - "9229:9229" # For debugger
    networks:
      - proxy
      - app
    volumes:
      - ./node_modules:${PROJECT_DIR:-/srv/app}/node_modules
      - ./packages/server:${PROJECT_DIR:-/srv/app}/packages/server:z
      - ./packages/shared:${PROJECT_DIR:-/srv/app}/packages/shared:z
      - ./scripts:${PROJECT_DIR:-/srv/app}/scripts:z
      - ./data/logs:${PROJECT_DIR:-/srv/app}/data/logs:z
      - ./assets:${PROJECT_DIR:-/srv/app}/assets:z
      - ./data/uploads:${PROJECT_DIR:-/srv/app}/data/uploads:z
      - ./packages/server/src/db/migrations:${PROJECT_DIR:-/srv/app}/packages/server/src/db/migrations
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "node -e \"require('http').request({hostname: 'localhost', port: process.env.PORT_SERVER || 5331, path: '/healthcheck'}, res => { if (res.statusCode === 200) { process.exit(0) } else { process.exit(1) } }).on('error', err => { process.exit(1) }).end()\"" ]
      start_period: 90s
      interval: 20s
      timeout: 5s
      retries: 10
    command: /bin/sh -c "chmod +x ${PROJECT_DIR:-/srv/app}/scripts/* && ${PROJECT_DIR:-/srv/app}/scripts/server.sh"
  db:
    image: postgres:13-alpine
    restart: always
    container_name: nln_db
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      PROJECT_DIR: "${PROJECT_DIR:-/srv/app}"
      PGPORT: "${PORT_DB:-5433}"
    ports:
      - ${PORT_DB:-5433}:${PORT_DB:-5433}
    networks:
      - app
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./packages/db/entrypoint:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER:-site} && psql -U ${DB_USER:-site} -d ${DB_NAME:-postgres} -c 'SELECT 1'" ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: /bin/sh -c "exec docker-entrypoint.sh postgres"
  redis:
    image: redis:7-alpine
    container_name: nln_redis
    restart: always
    networks:
      - app
    volumes:
      - ./data/redis:${PROJECT_DIR:-/srv/app}/data/redis:z
    ports:
      - ${PORT_REDIS:-6380}:6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: /bin/sh -c "mkdir -p ${PROJECT_DIR:-/srv/app}/data/redis/appendonlydir && rm -f ${PROJECT_DIR:-/srv/app}/data/redis/dump.rdb && redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --appendonly yes --dbfilename dump.rdb --dir ${PROJECT_DIR:-/srv/app}/data/redis/"
  adminer:
    image: ghcr.io/jeliebig/adminer-autologin
    container_name: nln_adminer
    restart: always
    environment:
      ADMINER_PLUGINS: login-env-vars
      ADMINER_DRIVER: pgsql
      ADMINER_SERVER: db
      ADMINER_USERNAME: "${DB_USER}"
      ADMINER_PASSWORD: "${DB_PASSWORD}"
      ADMINER_DB: "${DB_NAME}"
    networks:
      - app
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8081:8081
    command: /bin/sh -c "exec php -S [::]:8081 -t /var/www/html/"

networks:
  proxy:
    name: nginx-proxy
    external: true
  app:
